{"version":3,"sources":["images/undraw_authentication_fsn5.svg","images/Wave.png","components/Login/FormLogin.jsx","components/Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","styled","div","FormLogin","className","type","placeholder","icon","faUser","faUserLock","Container","Wave","Login","faDraftingCompass","src","auth","alt","faFacebookF","faTwitter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,wD,mBCA3CD,EAAOC,QAAU,IAA0B,kC,2vDCO3C,IAAMC,EAAYC,IAAOC,IAAV,KA4GAC,EA7BG,WAChB,OACE,kBAACH,EAAD,KACE,4BAAQI,UAAU,kBAAlB,WACA,8BACE,yBAAKA,UAAU,UACb,kDACA,+CAEF,yBAAKA,UAAU,cACb,2BAAOC,KAAK,QAAQC,YAAY,QAAQF,UAAU,eAClD,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAiBG,KAAMC,QAI3B,yBAAKJ,UAAU,cACb,2BAAOC,KAAK,WAAWC,YAAY,WAAWF,UAAU,eACxD,yBAAKA,UAAU,cACb,kBAAC,IAAD,CAAiBG,KAAME,QAI3B,4BAAQJ,KAAK,SAASD,UAAU,iBAAhC,Y,ojDClGR,IAAMM,EAAYT,IAAOC,IAAV,IAkBYS,KA2EZC,EAvBD,WACZ,OACE,kBAACF,EAAD,KACE,yBAAKN,UAAU,SACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,4BAAI,kBAAC,IAAD,CAAiBG,KAAMM,MAA3B,cAEA,yBAAKT,UAAU,0BACZ,yBAAKU,IAAKC,IAAMC,IAAI,eAGvB,yBAAKZ,UAAU,UAAf,aACY,kBAAC,IAAD,CAAiBG,KAAMU,MADnC,IACmD,kBAAC,IAAD,CAAiBV,KAAMW,QAG5E,kBAAC,EAAD,UCvFKC,MANf,WACE,OACG,kBAAC,EAAD,OCMeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ac710e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_authentication_fsn5.5911f723.svg\";","module.exports = __webpack_public_path__ + \"static/media/Wave.9ef697cf.png\";","import React from 'react'\n\nimport { faUser, faUserLock } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport styled from 'styled-components'\n\nconst LoginForm = styled.div`\n  \n  margin: 1rem;\n  padding: 2rem;\n  padding-left: 0;\n\n  .btn {\n    padding: .8rem 1.5rem;\n    border: none;\n    border-radius: 4rem;\n    background: var(--primary-gradient);\n    color: whitesmoke;\n    font-size: .7rem;\n    font-family: var(--Montserrat);\n    box-shadow: var(--primary-shadow);\n    float: right;\n    cursor: pointer;\n  }\n\n  form {\n    margin-top: 6.5rem;\n\n    .titles {\n      margin-bottom: 2.2rem;\n\n      h3, h6 {\n        font-family: var(--Montserrat);\n        padding: 0;\n        margin: 0;\n        text-align: center;\n      }\n\n      h6 {\n        font-family: var(--Lobster);\n        color: #444444D2;\n      }\n    }\n\n    .form-group {\n      text-align: left;\n      border: 1px solid var(--border-color);\n      margin-top: 1.5rem;\n      margin-right: 0rem;\n      border-radius: 3rem;\n      width: 100%;\n      padding: .4rem;\n\n      .form-input {\n        padding: .5rem 1rem;\n        background: transparent;\n        border: none;\n        font-family: var(--Montserrat);\n        font-size: .9rem;\n        overflow: hidden;\n        width: calc(100% - 65px);\n\n      }\n\n      input:focus{\n        outline: none;\n      }\n\n      .input-icon {\n        display: inline;\n        color: var(--border-color);\n        margin-left: 4px;\n      }\n    }\n\n    .btn-login{\n      margin-top: 3rem;\n      padding: 1rem 0rem;\n      margin-left: 0rem;\n      width: 100%;\n      font-size: 1rem;\n    }\n  }\n` \n\nconst FormLogin = () => {\n  return (\n    <LoginForm>\n      <button className=\"btn btn-signup\">Sign Up</button>\n      <form>\n        <div className=\"titles\">\n          <h6>We keep everything</h6>\n          <h3>Ready to Login</h3>\n        </div>\n        <div className=\"form-group\">\n          <input type=\"email\" placeholder=\"Email\" className=\"form-input\" />\n          <div className=\"input-icon\">\n            <FontAwesomeIcon icon={faUser}/>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <input type=\"password\" placeholder=\"Password\" className=\"form-input\" />\n          <div className=\"input-icon\">\n            <FontAwesomeIcon icon={faUserLock}/>\n          </div>\n        </div>\n\n        <button type=\"submit\" className=\"btn btn-login\">Login</button>\n      </form>\n    </LoginForm>\n  );\n}\n \nexport default FormLogin;","import React from 'react'\nimport auth from '../../images/undraw_authentication_fsn5.svg'\nimport Wave from '../../images/Wave.png'\n\nimport { faDraftingCompass,  } from \"@fortawesome/free-solid-svg-icons\";\nimport { faFacebookF, faTwitter} from '@fortawesome/free-brands-svg-icons'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport styled from 'styled-components'\nimport FormLogin from './FormLogin';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  \n  .panel {\n    width: 70%;\n    height: 77%;\n    box-shadow: var(--primary-gradient);\n\n    .row {\n      display: grid;\n      grid-template-columns: 65% 35%;\n      height: 100%;\n      background: #FFF;\n      \n      .liquid {\n        background: url('${Wave}');\n        background-size: 100%;-webkit-background-size: 100%;\n        background-repeat: no-repeat;\n        h4 {\n          text-align: left;\n          padding: 0 2rem;\n          color: whitesmoke;\n          font-family: var(--Montserrat);\n          \n        }\n        .owl-carousel {\n          float: right;\n          width: 100%;\n          height: 80%;\n\n          img{\n            height: 100%; \n            width: 100%;\n            background-repeat: no-repeat;\n            background-size: cover;\n            padding-right: 3rem;\n          }\n        }\n\n        .follow {\n          margin-top: 0;\n          padding: 0 1.4rem;\n          font-family: var(--Lobster);\n          color: whitesmoke;\n          position: relative;\n          font-size: .9rem;\n\n          ::after {\n            content: '';\n            position: absolute;\n            left: 73px;\n            width: 50px;\n            border: 1px solid whitesmoke;\n            border-radius: 4rem;\n            margin-top: .5rem;\n          }\n\n          svg:first-child{\n            margin-left: 3rem;\n          }\n          \n        }\n      }\n    }\n  }\n`\n\nconst Login = () => {\n  return (\n    <Container>\n      <div className=\"panel\">\n        <div className=\"row\">\n          <div className=\"col liquid\">\n            <h4><FontAwesomeIcon icon={faDraftingCompass} /> Ready Co.</h4>\n\n            <div className=\"owl-carousel owl-theme\">\n              {<img src={auth} alt=\"login_img\"/>}\n            </div>\n\n            <div className=\"follow\">\n              Follow us <FontAwesomeIcon icon={faFacebookF} /> <FontAwesomeIcon icon={faTwitter} />\n            </div>\n          </div>\n          <FormLogin/>\n        </div>\n      </div>\n    </Container>\n  );\n}\n \nexport default Login;","import React from 'react';\nimport './App.css';\nimport Login from './components/Login/Login';\n\nfunction App() {\n  return (\n     <Login/>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}